version: '3.8'

services:
  # Main Flask Application
  web:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: dss-web
    ports:
      - "5000:5000"
    volumes:
      - ./db:/app/db
      - ./logs:/app/logs
      - app-data:/app/data
      - ./static:/app/static
      - ./templates:/app/templates
    environment:
      - FLASK_APP=app.py
      - FLASK_ENV=production
      - DATABASE_URL=sqlite:///db/student_migration_database.db
      - SECRET_KEY=your-secret-key-here
    depends_on:
      - db-init
    networks:
      - dss-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Database Initialization Service
  db-init:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: dss-db-init
    volumes:
      - ./db:/app/db
      - ./student_migration_data.csv:/app/student_migration_data.csv
      - ./student_migration_database.db:/app/student_migration_database.db
    environment:
      - FLASK_APP=app.py
      - FLASK_ENV=production
    command: python -c "from app import db; db.create_all(); print('Database initialized')"
    networks:
      - dss-network
    depends_on:
      - db-volume-init

  # Volume initialization service
  db-volume-init:
    image: alpine:latest
    container_name: dss-volume-init
    volumes:
      - app-data:/app/data
      - ./db:/app/db
    command: >
      sh -c "
        mkdir -p /app/data/db &&
        mkdir -p /app/data/logs &&
        chmod 755 /app/data/db &&
        chmod 755 /app/data/logs &&
        echo 'Volume initialization completed'
      "

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    container_name: dss-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./static:/var/www/static
    depends_on:
      - web
    networks:
      - dss-network
    restart: unless-stopped

  # Redis for Caching (Optional - for enhanced performance)
  redis:
    image: redis:alpine
    container_name: dss-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - dss-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Monitoring Service with Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: dss-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - dss-network
    restart: unless-stopped

  # Grafana for Monitoring Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: dss-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - dss-network
    restart: unless-stopped

volumes:
  app-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  dss-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16